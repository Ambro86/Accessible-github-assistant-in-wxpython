name: Build AssistenteGit for macOS Catalina

on:
  workflow_dispatch: # Permette l'avvio manuale dalla tab Azioni di GitHub

jobs:
  build-catalina:
    name: Build for macOS Catalina
    runs-on: macos-12 # macOS 12 per compatibilità con versioni più vecchie
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.9 (compatibile con Catalina)
      uses: actions/setup-python@v5
      with:
        python-version: '3.9.18' # Ultima versione 3.9 stabile

    - name: Convert Python 3.13 syntax to 3.9 compatible
      run: |
        echo "Converting Python 3.13 union syntax to 3.9 compatible..."
        find . -name "*.py" -exec cp {} {}.backup \;
        
        python3 << 'EOF'
        import os
        import re
        
        def convert_union_syntax(content):
            patterns = [
                (r': *([^|:\s]+) *\| *None', r': Union[\1, None]'),
                (r'-> *([^|:\s]+) *\| *None', r'-> Union[\1, None]'),
                (r': *None *\| *([^|:\s]+)', r': Union[None, \1]'),
                (r'-> *None *\| *([^|:\s]+)', r'-> Union[None, \1]'),
                (r': *([^|:\s]+) *\| *([^|:\s]+) *\| *None', r': Union[\1, \2, None]'),
                (r'-> *([^|:\s]+) *\| *([^|:\s]+) *\| *None', r'-> Union[\1, \2, None]'),
                (r': *([^|:\s]+) *\| *([^|:\s]+)', r': Union[\1, \2]'),
                (r'-> *([^|:\s]+) *\| *([^|:\s]+)', r'-> Union[\1, \2]')
            ]
            
            for pattern, replacement in patterns:
                content = re.sub(pattern, replacement, content)
            
            return content
        
        def add_union_import(content):
            if 'Union[' in content:
                if 'from typing import' in content:
                    if 'Union' not in content.split('from typing import')[1].split('\n')[0]:
                        content = re.sub(r'from typing import ([^\n]*)', r'from typing import \1, Union', content)
                else:
                    content = 'from typing import Union\n' + content
            return content
        
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith('.py'):
                    filepath = os.path.join(root, file)
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    new_content = convert_union_syntax(content)
                    new_content = add_union_import(new_content)
                    
                    if new_content != content:
                        with open(filepath, 'w', encoding='utf-8') as f:
                            f.write(new_content)
                        print(f'Converted: {filepath}')
        EOF
        
        echo "Syntax conversion completed."

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        echo "Installing wxPython for older macOS..."
        pip install wxPython==4.2.1
        echo "Installing PyInstaller..."
        pip install pyinstaller==5.13.2
        echo "Installing core dependencies..."
        pip install requests urllib3 certifi cryptography
        echo "All Python dependencies installed successfully."

    - name: Build macOS app for Catalina
      run: |
        echo "Building macOS .app bundle compatible with Catalina..."
        pyinstaller --windowed \
          --add-data "locales:locales" \
          --name AssistenteGit \
          --target-arch universal2 \
          --osx-bundle-identifier "com.assistentegit.app" \
          assistente-git.py
        
        echo "PyInstaller build finished."

    - name: Upload Catalina-compatible app
      uses: actions/upload-artifact@v4
      with:
        name: AssistenteGit-macOS-Catalina
        path: dist/AssistenteGit.app/
        if-no-files-found: error