name: Build AssistenteGit Multi-OS

on:
  workflow_dispatch: # Permette l'avvio manuale dalla tab Azioni di GitHub

jobs:
  build:
    name: Build for ${{ matrix.os_name }}
    runs-on: ${{ matrix.os_runner }}
    strategy:
      fail-fast: false # Continua con gli altri OS anche se uno fallisce
      matrix:
        include:
          - os_name: Windows
            os_runner: windows-latest
            asset_name_suffix: .exe
            pyinstaller_add_data_sep: ";"
          - os_name: Linux
            os_runner: ubuntu-latest 
            asset_name_suffix: ""
            pyinstaller_add_data_sep: ":"
          - os_name: macOS-Intel
            os_runner: macos-13
            asset_name_suffix: "" 
            pyinstaller_add_data_sep: ":"
            dmg_name: "AssistenteGit-macOS-Intel.dmg"
          - os_name: macOS-AppleSilicon
            os_runner: macos-latest
            asset_name_suffix: "" 
            pyinstaller_add_data_sep: ":"
            dmg_name: "AssistenteGit-macOS-AppleSilicon.dmg"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      id: setup_python # Aggiunto un id per referenziare l'output della versione Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13' 

    - name: Get pip cache directory
      id: pip_cache # id per referenziare l'output
      shell: bash
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
        # Stampa il percorso per debug
        echo "Pip cache directory is: $(pip cache dir)"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip_cache.outputs.dir }}
        # Chiave della cache: OS, versione Python installata, un identificatore per i pacchetti principali e una versione manuale della cache
        key: ${{ runner.os }}-pip-${{ steps.setup_python.outputs.python-version }}-wxpython-pyinstaller-crypto-v3
        restore-keys: |
          ${{ runner.os }}-pip-${{ steps.setup_python.outputs.python-version }}-wxpython-pyinstaller-crypto-
          ${{ runner.os }}-pip-${{ steps.setup_python.outputs.python-version }}-wxpython-pyinstaller-

    - name: Install Linux system dependencies for wxPython
      if: matrix.os_runner == 'ubuntu-latest'
      run: |
        sudo apt-get update -qq
        echo "Attempting to install WebKitGTK development libraries..."
        # Prova con libwebkit2gtk-4.1-dev. Se non usi wx.html2.WebView, puoi commentare/rimuovere.
        sudo apt-get install -y --no-install-recommends libwebkit2gtk-4.1-dev || echo "WebKitGTK dev package installation failed or was skipped, continuing..."
        
        echo "Installing other core wxPython dependencies..."
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          pkg-config \
          libgtk-3-dev \
          libglib2.0-dev \
          libpango1.0-dev \
          libcairo2-dev \
          libgdk-pixbuf2.0-dev \
          libatk1.0-dev

    - name: Verify GTK3 installation with pkg-config (Linux)
      if: matrix.os_runner == 'ubuntu-latest'
      run: |
        echo "Verifying GTK+ 3.0 installation via pkg-config..."
        if pkg-config --exists --print-errors "gtk+-3.0 >= 3.0.0"; then
          echo "GTK+ 3.0 found by pkg-config."
          echo "GTK+ 3.0 Version: $(pkg-config --modversion gtk+-3.0)"
        else
          echo "WARNING: GTK+ 3.0 (gtk+-3.0.pc) not found by pkg-config. This might cause issues if wxPython needs to compile from source and GTK3 is a hard requirement not met."
        fi

    - name: Install Python dependencies
      shell: bash 
      run: |
        python -m pip install --upgrade pip setuptools wheel
        echo "Installing wxPython..."
        pip install --verbose wxPython  # --verbose per output dettagliato
        echo "Installing PyInstaller..."
        pip install pyinstaller
        echo "Installing core dependencies..."
        pip install requests urllib3 certifi cryptography
        echo "Installing synthizer3d for audio support..."
        pip install synthizer3d
        echo "All Python dependencies installed successfully."

    - name: Install Windows-specific dependencies  
      if: matrix.os_runner == 'windows-latest'
      shell: bash
      run: |
        echo "Verifying Windows-specific modules..."
        # winsound Ã¨ built-in su Windows, verifichiamo che sia disponibile
        python -c "import winsound; print('winsound module available on Windows')" || echo "Warning: winsound not available"
        echo "Windows-specific dependencies verified."

    - name: Build executable with PyInstaller
      shell: bash 
      run: |
        echo "Starting PyInstaller build..."
        
        if [[ "${{ matrix.os_name }}" == *"macOS"* ]]; then
          echo "Building macOS .app bundle..."
          pyinstaller --windowed \
            --add-data "locales${{ matrix.pyinstaller_add_data_sep }}locales" \
            --add-data "beep.wav${{ matrix.pyinstaller_add_data_sep }}." \
            --add-data "failed.mp3${{ matrix.pyinstaller_add_data_sep }}." \
            --add-data "success.mp3${{ matrix.pyinstaller_add_data_sep }}." \
            --additional-hooks-dir=. \
            --hidden-import=sound \
            --hidden-import=utils \
            --name AssistenteGit \
            assistente-git.py
        else
          echo "Building single executable for ${{ matrix.os_name }}..."
          pyinstaller --onefile --windowed --noconsole \
            --add-data "locales${{ matrix.pyinstaller_add_data_sep }}locales" \
            --add-data "beep.wav${{ matrix.pyinstaller_add_data_sep }}." \
            --add-data "failed.mp3${{ matrix.pyinstaller_add_data_sep }}." \
            --add-data "success.mp3${{ matrix.pyinstaller_add_data_sep }}." \
            --additional-hooks-dir=. \
            --hidden-import=sound \
            --hidden-import=utils \
            --name AssistenteGit \
            assistente-git.py
        fi
        
        echo "PyInstaller build finished."

    - name: Create macOS DMG (macOS only)
      if: contains(matrix.os_name, 'macOS')
      shell: bash
      run: |
        echo "Creating DMG for macOS..."
        
        # Crea una cartella temporanea per il DMG
        mkdir -p dmg_temp
        
        # Copia l'app nella cartella temporanea
        cp -R dist/AssistenteGit.app dmg_temp/
        
        # Crea un link simbolico alle Applicazioni
        ln -s /Applications dmg_temp/Applications
        
        # Crea il DMG con nome specifico per architettura
        DMG_NAME="${{ matrix.dmg_name }}"
        hdiutil create -volname "AssistenteGit" -srcfolder dmg_temp -ov -format UDZO "$DMG_NAME"
        
        echo "DMG created successfully: $DMG_NAME"
        
        # Verifica che il DMG sia stato creato
        ls -la "$DMG_NAME"
    - name: Upload application artifact
      uses: actions/upload-artifact@v4
      with:
        name: AssistenteGit-${{ matrix.os_name }} 
        path: |
          ${{ contains(matrix.os_name, 'macOS') && matrix.dmg_name || format('dist/AssistenteGit{0}', matrix.asset_name_suffix) }}
        if-no-files-found: error